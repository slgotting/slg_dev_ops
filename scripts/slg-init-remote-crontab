#!/usr/bin/env python3
import subprocess
import os
import argparse

def get_arguments():
    parser = argparse.ArgumentParser()

    # argument groups can have their tickers combined (ie -su)
    bools = parser.add_argument_group()

    # integer value
    parser.add_argument('-u', '--username', default='steven', type=str,
                        help="Username of the crontab's owner")

    args = parser.parse_args()

    return args


if __name__ == '__main__':
    args = get_arguments()
    print(args)

    username = args.username

    TEMPLATE = f'''
PATH=/home/{username}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin:/home/{username}/bin

# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
'''

    subprocess.run(f'( echo "{TEMPLATE}" ) | crontab -u {username} -', shell=True)
    print('Success. Check your crontab with `crontab -e` to check result')
